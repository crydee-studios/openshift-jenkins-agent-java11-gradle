#!/bin/bash

# Agent configuration
# Overwrites settings from the base image run-jnlp-client that are incompatible with $JAVA_VERSION

echo "Configure agent"

# Set correct java alternative to use from $JAVA_VERSION

# multi-arch check ... if x86_64, pick between 32 and 64 bit 
if [[ "$(uname -m)" == "x86_64" ]]; then
    # Set the JVM architecture used.  Follow OPENSHIFT_JENKINS_JVM_ARCH if set.  If
    # not, use 32 bit JVM for space efficiency if container size < 2GiB
    if [[ "${OPENSHIFT_JENKINS_JVM_ARCH}" == "x86_64" || \
        ( "${OPENSHIFT_JENKINS_JVM_ARCH}" == "" && "${CONTAINER_MEMORY_IN_MB}" -ge 2048 ) ]]; then
      alternatives --set java $(alternatives --display java | grep "${JAVA_VERSION}" | awk '/family.*x86_64/ { print $1; }')
    else
      alternatives --set java $(alternatives --display java | grep "${JAVA_VERSION}" | awk '/family.*i386/ { print $1; }')
      export MALLOC_ARENA_MAX=${MALLOC_ARENA_MAX:-1}
    fi
#set JVM for all other archs
else
    alternatives --set java $(alternatives --display java | grep "${JAVA_VERSION}" | awk '/family.*'$(uname -m)'/ { print $1; }')
fi

echo Java tool options: "${JAVA_TOOL_OPTIONS}"

if [[ -z "${JAVA_TOOL_OPTIONS}" ]]; then
    # Supply an empty option to prevent the base run-jnlp-client from setting options incompatible with Java 10+
    JAVA_TOOL_OPTIONS=" "
    export JAVA_TOOL_OPTIONS
fi

echo "using $(readlink /etc/alternatives/java)"